{"version":3,"sources":["assets/cards-front sync /^/.*/.png$","assets/logo.png","assets/card-back.png","assets/cards-front/0B.png","assets/cards-front/0G.png","assets/cards-front/0R.png","assets/cards-front/0Y.png","assets/cards-front/1B.png","assets/cards-front/1G.png","assets/cards-front/1R.png","assets/cards-front/1Y.png","assets/cards-front/2B.png","assets/cards-front/2G.png","assets/cards-front/2R.png","assets/cards-front/2Y.png","assets/cards-front/3B.png","assets/cards-front/3G.png","assets/cards-front/3R.png","assets/cards-front/3Y.png","assets/cards-front/4B.png","assets/cards-front/4G.png","assets/cards-front/4R.png","assets/cards-front/4Y.png","assets/cards-front/5B.png","assets/cards-front/5G.png","assets/cards-front/5R.png","assets/cards-front/5Y.png","assets/cards-front/6B.png","assets/cards-front/6G.png","assets/cards-front/6R.png","assets/cards-front/6Y.png","assets/cards-front/7B.png","assets/cards-front/7G.png","assets/cards-front/7R.png","assets/cards-front/7Y.png","assets/cards-front/8B.png","assets/cards-front/8G.png","assets/cards-front/8R.png","assets/cards-front/8Y.png","assets/cards-front/9B.png","assets/cards-front/9G.png","assets/cards-front/9R.png","assets/cards-front/9Y.png","assets/cards-front/D2B.png","assets/cards-front/D2G.png","assets/cards-front/D2R.png","assets/cards-front/D2Y.png","assets/cards-front/D4W.png","assets/cards-front/W.png","assets/cards-front/_B.png","assets/cards-front/_G.png","assets/cards-front/_R.png","assets/cards-front/_Y.png","assets/cards-front/skipB.png","assets/cards-front/skipG.png","assets/cards-front/skipR.png","assets/cards-front/skipY.png","utils/packOfCards.js","components/Game.js","components/Spinner.js","assets/sounds/draw2-sound.mp3","assets/sounds/draw4-sound.mp3","assets/sounds/game-bg-music.mp3","assets/sounds/game-over-sound.mp3","assets/sounds/shuffling-cards-1.mp3","assets/sounds/skip-sound.mp3","assets/sounds/uno-sound.mp3","assets/sounds/wild-sound.mp3","utils/shuffleArray.js","utils/randomCodeGenerator.js","components/Homepage.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","socket","Spinner","_jsx","className","children","Game","props","data","queryString","parse","location","search","defaultRoom","roomCode","_useState","useState","_useState2","_slicedToArray","room","_useState3","_useState4","roomFull","setRoomFull","_useState5","_useState6","users","setUsers","_useState7","_useState8","currentUser","setCurrentUser","_useState9","_useState10","message","setMessage","_useState11","_useState12","messages","setMessages","useEffect","io","connect","process","forceNew","reconnectionAttempts","timeout","transports","emit","error","off","_useState13","_useState14","gameOver","setGameOver","_useState15","_useState16","winner","setWinner","_useState17","_useState18","turn","setTurn","_useState19","_useState20","player1Deck","setPlayer1Deck","_useState21","_useState22","player2Deck","setPlayer2Deck","_useState23","_useState24","currentColor","setCurrentColor","_useState25","_useState26","currentNumber","setCurrentNumber","_useState27","_useState28","playedCardsPile","setPlayedCardsPile","_useState29","_useState30","drawCardPile","setDrawCardPile","_useState31","_useState32","isChatBoxHidden","setChatBoxHidden","_useState33","_useState34","isUnoButtonPressed","setUnoButtonPressed","_useState35","_useState36","isSoundMuted","setSoundMuted","_useState37","_useState38","isMusicMuted","setMusicMuted","_useSound","useSound","bgMusic","loop","_useSound2","playBBgMusic","pause","_useSound3","unoSound","playUnoSound","_useSound5","shufflingSound","playShufflingSound","_useSound7","skipCardSound","playSkipCardSound","_useSound9","draw2CardSound","playDraw2CardSound","_useSound11","wildCardSound","playWildCardSound","_useSound13","draw4CardSound","playDraw4CardSound","_useSound15","gameOverSound","playGameOverSound","startingCardIndex","shuffledCards","array","i","length","j","Math","floor","random","temp","shuffleArray","PACK_OF_CARDS","splice","_toConsumableArray","charAt","on","_ref","_ref2","_ref3","_ref4","name","concat","chatBody","document","querySelector","scrollTop","scrollHeight","checkGameOver","arr","checkWinner","player","toggleChatBox","style","display","sendMessage","event","preventDefault","onCardPlayedHandler","played_card","cardPlayedBy","numberOfPlayedCard","colorOfPlayedCard","console","log","removeIndex","indexOf","slice","alert","copiedDrawCardPileArray","drawCard1","pop","drawCard2","updatedPlayer1Deck","push","updatedPlayer2Deck","drawCard1X","drawCard2X","newColor","prompt","toUpperCase","drawCard3","drawCard4","onCardDrawnHandler","drawCard","colorOfDrawnCard","numberOfDrawnCard","_jsxs","_Fragment","src","require","default","onClick","pointerEvents","item","disabled","class","msg","user","text","type","placeholder","value","onChange","target","onKeyPress","key","href","navigator","share","title","url","window","then","catch","makeid","result","characters","charactersLength","Homepage","setRoomCode","width","Link","to","randomCodeGenerator","rel","App","Route","path","exact","component","ReactDOM","render","React","StrictMode","BrowserRouter","getElementById"],"mappings":"kGAAA,IAAIA,EAAM,CACT,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,YAAa,IACb,YAAa,IACb,YAAa,IACb,YAAa,IACb,YAAa,IACb,UAAW,IACX,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,WAAY,IACZ,cAAe,IACf,cAAe,IACf,cAAe,IACf,cAAe,KAIhB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,EAC5B,CACA,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,CACP,CACA,OAAOP,EAAIE,EACZ,CACAD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,EACpB,EACAC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,E,yDC3EpB,OAAe,cAA0B,gC,+BCAzC,OAAe,cAA0B,qC,+FCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,+B,+BCAzC,OAAe,cAA0B,+B,+BCAzC,OAAe,cAA0B,+B,+BCAzC,OAAe,cAA0B,+B,+BCAzC,OAAe,cAA0B,+B,+BCAzC,OAAe,cAA0B,6B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,8B,+BCAzC,OAAe,cAA0B,iC,+BCAzC,OAAe,cAA0B,iC,+BCAzC,OAAe,cAA0B,iC,+BCAzC,OAAe,cAA0B,iC,mLCC1B,GACX,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,QAAS,QAAS,KAAM,KAAM,MAAO,MACvJ,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,QAAS,QAAS,KAAM,KAAM,MAAO,MACvJ,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAA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","file":"static/js/main.f519d979.chunk.js","sourcesContent":["var map = {\n\t\"./0B.png\": 100,\n\t\"./0G.png\": 101,\n\t\"./0R.png\": 102,\n\t\"./0Y.png\": 103,\n\t\"./1B.png\": 104,\n\t\"./1G.png\": 105,\n\t\"./1R.png\": 106,\n\t\"./1Y.png\": 107,\n\t\"./2B.png\": 108,\n\t\"./2G.png\": 109,\n\t\"./2R.png\": 110,\n\t\"./2Y.png\": 111,\n\t\"./3B.png\": 112,\n\t\"./3G.png\": 113,\n\t\"./3R.png\": 114,\n\t\"./3Y.png\": 115,\n\t\"./4B.png\": 116,\n\t\"./4G.png\": 117,\n\t\"./4R.png\": 118,\n\t\"./4Y.png\": 119,\n\t\"./5B.png\": 120,\n\t\"./5G.png\": 121,\n\t\"./5R.png\": 122,\n\t\"./5Y.png\": 123,\n\t\"./6B.png\": 124,\n\t\"./6G.png\": 125,\n\t\"./6R.png\": 126,\n\t\"./6Y.png\": 127,\n\t\"./7B.png\": 128,\n\t\"./7G.png\": 129,\n\t\"./7R.png\": 130,\n\t\"./7Y.png\": 131,\n\t\"./8B.png\": 132,\n\t\"./8G.png\": 133,\n\t\"./8R.png\": 134,\n\t\"./8Y.png\": 135,\n\t\"./9B.png\": 136,\n\t\"./9G.png\": 137,\n\t\"./9R.png\": 138,\n\t\"./9Y.png\": 139,\n\t\"./D2B.png\": 140,\n\t\"./D2G.png\": 141,\n\t\"./D2R.png\": 142,\n\t\"./D2Y.png\": 143,\n\t\"./D4W.png\": 144,\n\t\"./W.png\": 145,\n\t\"./_B.png\": 146,\n\t\"./_G.png\": 147,\n\t\"./_R.png\": 148,\n\t\"./_Y.png\": 149,\n\t\"./skipB.png\": 150,\n\t\"./skipG.png\": 151,\n\t\"./skipR.png\": 152,\n\t\"./skipY.png\": 153\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 24;","export default __webpack_public_path__ + \"static/media/logo.2d1c62d5.png\";","export default __webpack_public_path__ + \"static/media/card-back.ee67de74.png\";","export default __webpack_public_path__ + \"static/media/0B.4a5eb6bf.png\";","export default __webpack_public_path__ + \"static/media/0G.87d131c4.png\";","export default __webpack_public_path__ + \"static/media/0R.17fec01d.png\";","export default __webpack_public_path__ + \"static/media/0Y.dbfd6ac8.png\";","export default __webpack_public_path__ + \"static/media/1B.d1916ca9.png\";","export default __webpack_public_path__ + \"static/media/1G.0fb8729c.png\";","export default __webpack_public_path__ + \"static/media/1R.49ed3f72.png\";","export default __webpack_public_path__ + \"static/media/1Y.4881d6f5.png\";","export default __webpack_public_path__ + \"static/media/2B.b30c34c7.png\";","export default __webpack_public_path__ + \"static/media/2G.9f1043d9.png\";","export default __webpack_public_path__ + \"static/media/2R.b5523c9e.png\";","export default __webpack_public_path__ + \"static/media/2Y.7a49720f.png\";","export default __webpack_public_path__ + \"static/media/3B.55554e09.png\";","export default __webpack_public_path__ + \"static/media/3G.d12b188c.png\";","export default __webpack_public_path__ + \"static/media/3R.01e98a85.png\";","export default __webpack_public_path__ + \"static/media/3Y.60a855f1.png\";","export default __webpack_public_path__ + \"static/media/4B.9f863da2.png\";","export default __webpack_public_path__ + \"static/media/4G.e7f0c39e.png\";","export default __webpack_public_path__ + \"static/media/4R.d4b55dbd.png\";","export default __webpack_public_path__ + \"static/media/4Y.ae547a47.png\";","export default __webpack_public_path__ + \"static/media/5B.7da3f78c.png\";","export default __webpack_public_path__ + \"static/media/5G.5f629ef3.png\";","export default __webpack_public_path__ + \"static/media/5R.1cdf87eb.png\";","export default __webpack_public_path__ + \"static/media/5Y.8dfd1d59.png\";","export default __webpack_public_path__ + \"static/media/6B.3ae6979e.png\";","export default __webpack_public_path__ + \"static/media/6G.f7ec1912.png\";","export default __webpack_public_path__ + \"static/media/6R.ddda836b.png\";","export default __webpack_public_path__ + \"static/media/6Y.7ad7c4b5.png\";","export default __webpack_public_path__ + \"static/media/7B.61517841.png\";","export default __webpack_public_path__ + \"static/media/7G.4a277a6d.png\";","export default __webpack_public_path__ + \"static/media/7R.d9082455.png\";","export default __webpack_public_path__ + \"static/media/7Y.6eafca54.png\";","export default __webpack_public_path__ + \"static/media/8B.30db8e3e.png\";","export default __webpack_public_path__ + \"static/media/8G.b0f18f92.png\";","export default __webpack_public_path__ + \"static/media/8R.296eb053.png\";","export default __webpack_public_path__ + \"static/media/8Y.cefea39b.png\";","export default __webpack_public_path__ + \"static/media/9B.e252ce18.png\";","export default __webpack_public_path__ + \"static/media/9G.82ff5a0b.png\";","export default __webpack_public_path__ + \"static/media/9R.616afbce.png\";","export default __webpack_public_path__ + \"static/media/9Y.fc2b075e.png\";","export default __webpack_public_path__ + \"static/media/D2B.a1e36402.png\";","export default __webpack_public_path__ + \"static/media/D2G.cc357b81.png\";","export default __webpack_public_path__ + \"static/media/D2R.45d93f92.png\";","export default __webpack_public_path__ + \"static/media/D2Y.3b7c7812.png\";","export default __webpack_public_path__ + \"static/media/D4W.8ab81810.png\";","export default __webpack_public_path__ + \"static/media/W.d932cc55.png\";","export default __webpack_public_path__ + \"static/media/_B.95aa59aa.png\";","export default __webpack_public_path__ + \"static/media/_G.d9435180.png\";","export default __webpack_public_path__ + \"static/media/_R.95d0dbdf.png\";","export default __webpack_public_path__ + \"static/media/_Y.43a5d6f0.png\";","export default __webpack_public_path__ + \"static/media/skipB.f083b8d7.png\";","export default __webpack_public_path__ + \"static/media/skipG.d0dc1da2.png\";","export default __webpack_public_path__ + \"static/media/skipR.80b52ed1.png\";","export default __webpack_public_path__ + \"static/media/skipY.1355a1fb.png\";","// * pack of 108 cards (_ = reverse)\nexport default [\n    '0R', '1R', '1R', '2R', '2R', '3R', '3R', '4R', '4R', '5R', '5R', '6R', '6R', '7R', '7R', '8R', '8R', '9R', '9R', 'skipR', 'skipR', '_R', '_R', 'D2R', 'D2R',\n    '0G', '1G', '1G', '2G', '2G', '3G', '3G', '4G', '4G', '5G', '5G', '6G', '6G', '7G', '7G', '8G', '8G', '9G', '9G', 'skipG', 'skipG', '_G', '_G', 'D2G', 'D2G',\n    '0B', '1B', '1B', '2B', '2B', '3B', '3B', '4B', '4B', '5B', '5B', '6B', '6B', '7B', '7B', '8B', '8B', '9B', '9B', 'skipB', 'skipB', '_B', '_B', 'D2B', 'D2B',\n    '0Y', '1Y', '1Y', '2Y', '2Y', '3Y', '3Y', '4Y', '4Y', '5Y', '5Y', '6Y', '6Y', '7Y', '7Y', '8Y', '8Y', '9Y', '9Y', 'skipY', 'skipY', '_Y', '_Y', 'D2Y', 'D2Y',\n    'W', 'W', 'W', 'W', 'D4W', 'D4W', 'D4W', 'D4W'\n]","import queryString from \"query-string\";\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport useSound from \"use-sound\";\nimport PACK_OF_CARDS from \"../utils/packOfCards\";\nimport shuffleArray from \"../utils/shuffleArray\";\nimport Spinner from \"./Spinner\";\n\nimport draw2CardSound from \"../assets/sounds/draw2-sound.mp3\";\nimport draw4CardSound from \"../assets/sounds/draw4-sound.mp3\";\nimport bgMusic from \"../assets/sounds/game-bg-music.mp3\";\nimport gameOverSound from \"../assets/sounds/game-over-sound.mp3\";\nimport shufflingSound from \"../assets/sounds/shuffling-cards-1.mp3\";\nimport skipCardSound from \"../assets/sounds/skip-sound.mp3\";\nimport unoSound from \"../assets/sounds/uno-sound.mp3\";\nimport wildCardSound from \"../assets/sounds/wild-sound.mp3\";\n\n//NUMBER CODES FOR ACTION CARDS\n//SKIP - 404\n//DRAW 2 - 252\n//WILD - 300\n//DRAW 4 WILD - 600\n\nlet socket;\nconst ENDPOINT = process.env.REACT_APP_ENDPOINT;\n\nconst Game = (props) => {\n    // Check if props.location is defined and has a search property\n    // if (!props.location || !props.location.search) {\n    //     return <div>No search parameter found</div>;\n    // }\n    const data = queryString.parse(props.location.search);\n\n    // Set the default value for room based on data.roomCode\n    const defaultRoom = data.roomCode ? data.roomCode : \"\";\n\n    //initialize socket state\n    const [room, setRoom] = useState(defaultRoom);\n    const [roomFull, setRoomFull] = useState(false);\n    const [users, setUsers] = useState([]);\n    const [currentUser, setCurrentUser] = useState(\"\");\n    const [message, setMessage] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n\n    useEffect(() => {\n        const connectionOptions = {\n            forceNew: true,\n            reconnectionAttempts: \"Infinity\",\n            timeout: 10000,\n            transports: [\"websocket\"],\n        };\n        socket = io.connect(ENDPOINT, connectionOptions);\n\n        socket.emit(\"join\", { room: room }, (error) => {\n            if (error) setRoomFull(true);\n        });\n\n        //cleanup on component unmount\n        return function cleanup() {\n            socket.emit(\"disconnect\");\n            //shut down connnection instance\n            socket.off();\n        };\n    }, []);\n\n    //initialize game state\n    const [gameOver, setGameOver] = useState(true);\n    const [winner, setWinner] = useState(\"\");\n    const [turn, setTurn] = useState(\"\");\n    const [player1Deck, setPlayer1Deck] = useState([]);\n    const [player2Deck, setPlayer2Deck] = useState([]);\n    const [currentColor, setCurrentColor] = useState(\"\");\n    const [currentNumber, setCurrentNumber] = useState(\"\");\n    const [playedCardsPile, setPlayedCardsPile] = useState([]);\n    const [drawCardPile, setDrawCardPile] = useState([]);\n\n    const [isChatBoxHidden, setChatBoxHidden] = useState(true);\n    const [isUnoButtonPressed, setUnoButtonPressed] = useState(false);\n    const [isSoundMuted, setSoundMuted] = useState(false);\n    const [isMusicMuted, setMusicMuted] = useState(true);\n\n    const [playBBgMusic, { pause }] = useSound(bgMusic, { loop: true });\n    const [playUnoSound] = useSound(unoSound);\n    const [playShufflingSound] = useSound(shufflingSound);\n    const [playSkipCardSound] = useSound(skipCardSound);\n    const [playDraw2CardSound] = useSound(draw2CardSound);\n    const [playWildCardSound] = useSound(wildCardSound);\n    const [playDraw4CardSound] = useSound(draw4CardSound);\n    const [playGameOverSound] = useSound(gameOverSound);\n\n    //runs once on component mount\n    useEffect(() => {\n        // * shuffle CARDS\n        // * extract 7 random cards from CARDS and add them to p[ayer1Deck\n        // * extract 7 random cards from CARDS and add them to p[ayer2Deck\n        // * extract 1 random card from CARDS and add it to playedcardspi[e\n        // * add remaining cards from CARDS to dramardPi[e\n\n        // * set currentColor\n        // * set currentNumber\n\n        // * set turn to 'Player 1'\n        // * set gameOver to false\n\n        //shuffle PACK_OF_CARDS array\n        const shuffledCards = shuffleArray(PACK_OF_CARDS);\n\n        //extract first 7 elements to player1Deck\n        const player1Deck = shuffledCards.splice(0, 7);\n\n        //extract first 7 elements to player2Deck\n        const player2Deck = shuffledCards.splice(0, 7);\n\n        //extract random card from shuffledCards and check if its not an action card\n        let startingCardIndex;\n        while (true) {\n            startingCardIndex = Math.floor(Math.random() * 94);\n            if (\n                shuffledCards[startingCardIndex] === \"skipR\" ||\n                shuffledCards[startingCardIndex] === \"_R\" ||\n                shuffledCards[startingCardIndex] === \"D2R\" ||\n                shuffledCards[startingCardIndex] === \"skipG\" ||\n                shuffledCards[startingCardIndex] === \"_G\" ||\n                shuffledCards[startingCardIndex] === \"D2G\" ||\n                shuffledCards[startingCardIndex] === \"skipB\" ||\n                shuffledCards[startingCardIndex] === \"_B\" ||\n                shuffledCards[startingCardIndex] === \"D2B\" ||\n                shuffledCards[startingCardIndex] === \"skipY\" ||\n                shuffledCards[startingCardIndex] === \"_Y\" ||\n                shuffledCards[startingCardIndex] === \"D2Y\" ||\n                shuffledCards[startingCardIndex] === \"W\" ||\n                shuffledCards[startingCardIndex] === \"D4W\"\n            ) {\n                continue;\n            } else break;\n        }\n\n        //extract the card from that startingCardIndex into the playedCardsPile\n        const playedCardsPile = shuffledCards.splice(startingCardIndex, 1);\n\n        //store all remaining cards into drawCardPile\n        const drawCardPile = shuffledCards;\n\n        //send initial state to server\n        socket.emit(\"initGameState\", {\n            gameOver: false,\n            turn: \"Player 1\",\n            player1Deck: [...player1Deck],\n            player2Deck: [...player2Deck],\n            currentColor: playedCardsPile[0].charAt(1),\n            currentNumber: playedCardsPile[0].charAt(0),\n            playedCardsPile: [...playedCardsPile],\n            drawCardPile: [...drawCardPile],\n        });\n    }, []);\n\n    useEffect(() => {\n        socket.on(\n            \"initGameState\",\n            ({\n                gameOver,\n                turn,\n                player1Deck,\n                player2Deck,\n                currentColor,\n                currentNumber,\n                playedCardsPile,\n                drawCardPile,\n            }) => {\n                setGameOver(gameOver);\n                setTurn(turn);\n                setPlayer1Deck(player1Deck);\n                setPlayer2Deck(player2Deck);\n                setCurrentColor(currentColor);\n                setCurrentNumber(currentNumber);\n                setPlayedCardsPile(playedCardsPile);\n                setDrawCardPile(drawCardPile);\n            }\n        );\n\n        socket.on(\n            \"updateGameState\",\n            ({\n                gameOver,\n                winner,\n                turn,\n                player1Deck,\n                player2Deck,\n                currentColor,\n                currentNumber,\n                playedCardsPile,\n                drawCardPile,\n            }) => {\n                gameOver && setGameOver(gameOver);\n                gameOver === true && playGameOverSound();\n                winner && setWinner(winner);\n                turn && setTurn(turn);\n                player1Deck && setPlayer1Deck(player1Deck);\n                player2Deck && setPlayer2Deck(player2Deck);\n                currentColor && setCurrentColor(currentColor);\n                currentNumber && setCurrentNumber(currentNumber);\n                playedCardsPile && setPlayedCardsPile(playedCardsPile);\n                drawCardPile && setDrawCardPile(drawCardPile);\n                setUnoButtonPressed(false);\n            }\n        );\n\n        socket.on(\"roomData\", ({ users }) => {\n            setUsers(users);\n        });\n\n        socket.on(\"currentUserData\", ({ name }) => {\n            setCurrentUser(name);\n        });\n\n        socket.on(\"message\", (message) => {\n            setMessages((messages) => [...messages, message]);\n\n            const chatBody = document.querySelector(\".chat-body\");\n            chatBody.scrollTop = chatBody.scrollHeight;\n        });\n    }, []);\n\n    //some util functions\n    const checkGameOver = (arr) => {\n        return arr.length === 1;\n    };\n\n    const checkWinner = (arr, player) => {\n        return arr.length === 1 ? player : \"\";\n    };\n\n    const toggleChatBox = () => {\n        const chatBody = document.querySelector(\".chat-body\");\n        if (isChatBoxHidden) {\n            chatBody.style.display = \"block\";\n            setChatBoxHidden(false);\n        } else {\n            chatBody.style.display = \"none\";\n            setChatBoxHidden(true);\n        }\n    };\n\n    const sendMessage = (event) => {\n        event.preventDefault();\n        if (message) {\n            socket.emit(\"sendMessage\", { message: message }, () => {\n                setMessage(\"\");\n            });\n        }\n    };\n\n    // function to handle share button click\n    const share = () => {\n        if (navigator.share) {\n            navigator\n                .share({\n                    title: room,\n                    text: `Join me in this two-player Uno game! Room ID: ${room}`,\n                    url: window.location.href,\n                })\n                .then(() => console.log(\"Successful share\"))\n                .catch((error) => console.log(\"Error sharing\", error));\n        }\n    };\n\n    //driver functions\n    const onCardPlayedHandler = (played_card) => {\n        // * check turn\n        // *perform switch statement on played_card\n        // * case 1: simple number card\n        // * extract color and number of played _ card\n        // * match with currentColor and currentNumber\n        // * if matched\n        // * remove played_card from current player's deck and add to playedCardspile\n        // *update currentNumber and currentColor\n        // * set turn to other player\n        // *else\n        // * invalid move\n\n        // * case 2: skip card\n        // * extract color of played_card\n        // *match with currentColor\n        // * if matched\n        // * remove played_card from current player's deck and add to playedCardsPile\n        // * update currentNumber and currentColor\n        // * else\n        // * invalid move\n\n        // * case 3: draw 2 card\n        // * extract color of played_card\n        // * match with currentColor\n        // * if matched\n        // * remove last 2 cards from drawcardpile and add them to other player's deck\n        // * remove played_card from current player's deck and add to playedCardsPile\n        // * update currentNumber and currentColor\n        // * else\n        // * invalid move\n\n        // * case 4: wild card\n        // * ask user for new color and set currentColor to its value\n        // * remove played card from current player's deck and add to\n        // * set turn to other player\n\n        // * case 5: draw 4 wild card\n        // * ask user for new color and set currentColor to its value\n        // * remove Last 4 cards from drawcardPile and add them to other player's deck\n        // * remove played_card from current player's deck and add to playedcardspile\n\n        // * extra steps:\n        // * checked if the user played its last card if yes then change the gameOver state to true and the winner state to that particular player\n        // * also add a uno button and check to see if the player is playing its second to last card and had not pressed the UNO button on which a penalty of drawing two cards was given\n\n        //extract player who played the card\n        const cardPlayedBy = turn;\n        switch (played_card) {\n            //if card played was a number card\n            case \"0R\":\n            case \"1R\":\n            case \"2R\":\n            case \"3R\":\n            case \"4R\":\n            case \"5R\":\n            case \"6R\":\n            case \"7R\":\n            case \"8R\":\n            case \"9R\":\n            case \"_R\":\n            case \"0G\":\n            case \"1G\":\n            case \"2G\":\n            case \"3G\":\n            case \"4G\":\n            case \"5G\":\n            case \"6G\":\n            case \"7G\":\n            case \"8G\":\n            case \"9G\":\n            case \"_G\":\n            case \"0B\":\n            case \"1B\":\n            case \"2B\":\n            case \"3B\":\n            case \"4B\":\n            case \"5B\":\n            case \"6B\":\n            case \"7B\":\n            case \"8B\":\n            case \"9B\":\n            case \"_B\":\n            case \"0Y\":\n            case \"1Y\":\n            case \"2Y\":\n            case \"3Y\":\n            case \"4Y\":\n            case \"5Y\":\n            case \"6Y\":\n            case \"7Y\":\n            case \"8Y\":\n            case \"9Y\":\n            case \"_Y\": {\n                //extract number and color of played card\n                const numberOfPlayedCard = played_card.charAt(0);\n                const colorOfPlayedCard = played_card.charAt(1);\n                //check for color match\n                if (currentColor === colorOfPlayedCard) {\n                    console.log(\"colors matched!\");\n                    //check who played the card and return new state accordingly\n                    if (cardPlayedBy === \"Player 1\") {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player1Deck.indexOf(played_card);\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile];\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop();\n                            const drawCard2 = copiedDrawCardPileArray.pop();\n                            const updatedPlayer1Deck = [\n                                ...player1Deck.slice(0, removeIndex),\n                                ...player1Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer1Deck.push(drawCard1);\n                            updatedPlayer1Deck.push(drawCard2);\n                            !isSoundMuted && playShufflingSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                turn: \"Player 2\",\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playShufflingSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                turn: \"Player 2\",\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [\n                                    ...player1Deck.slice(0, removeIndex),\n                                    ...player1Deck.slice(removeIndex + 1),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                            });\n                        }\n                    } else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player2Deck.indexOf(played_card);\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile];\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop();\n                            const drawCard2 = copiedDrawCardPileArray.pop();\n                            const updatedPlayer2Deck = [\n                                ...player2Deck.slice(0, removeIndex),\n                                ...player2Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer2Deck.push(drawCard1);\n                            updatedPlayer2Deck.push(drawCard2);\n                            !isSoundMuted && playShufflingSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 2\"),\n                                turn: \"Player 1\",\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playShufflingSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 2\"),\n                                turn: \"Player 1\",\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [\n                                    ...player2Deck.slice(0, removeIndex),\n                                    ...player2Deck.slice(removeIndex + 1),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                            });\n                        }\n                    }\n                }\n                //check for number match\n                else if (currentNumber === numberOfPlayedCard) {\n                    console.log(\"numbers matched!\");\n                    //check who played the card and return new state accordingly\n                    if (cardPlayedBy === \"Player 1\") {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player1Deck.indexOf(played_card);\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile];\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop();\n                            const drawCard2 = copiedDrawCardPileArray.pop();\n                            const updatedPlayer1Deck = [\n                                ...player1Deck.slice(0, removeIndex),\n                                ...player1Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer1Deck.push(drawCard1);\n                            updatedPlayer1Deck.push(drawCard2);\n                            !isSoundMuted && playShufflingSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                turn: \"Player 2\",\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playShufflingSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                turn: \"Player 2\",\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [\n                                    ...player1Deck.slice(0, removeIndex),\n                                    ...player1Deck.slice(removeIndex + 1),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                            });\n                        }\n                    } else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update turn, currentColor and currentNumber\n                        const removeIndex = player2Deck.indexOf(played_card);\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile];\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop();\n                            const drawCard2 = copiedDrawCardPileArray.pop();\n                            const updatedPlayer2Deck = [\n                                ...player2Deck.slice(0, removeIndex),\n                                ...player2Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer2Deck.push(drawCard1);\n                            updatedPlayer2Deck.push(drawCard2);\n                            !isSoundMuted && playShufflingSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 2\"),\n                                turn: \"Player 1\",\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playShufflingSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 2\"),\n                                turn: \"Player 1\",\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [\n                                    ...player2Deck.slice(0, removeIndex),\n                                    ...player2Deck.slice(removeIndex + 1),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: numberOfPlayedCard,\n                            });\n                        }\n                    }\n                }\n                //if no color or number match, invalid move - do not update state\n                else {\n                    alert(\"Invalid Move!\");\n                }\n                break;\n            }\n            //if card played was a skip card\n            case \"skipR\":\n            case \"skipG\":\n            case \"skipB\":\n            case \"skipY\": {\n                //extract color of played skip card\n                const colorOfPlayedCard = played_card.charAt(4);\n                //check for color match\n                if (currentColor === colorOfPlayedCard) {\n                    console.log(\"colors matched!\");\n                    //check who played the card and return new state accordingly\n                    if (cardPlayedBy === \"Player 1\") {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber\n                        const removeIndex = player1Deck.indexOf(played_card);\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile];\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop();\n                            const drawCard2 = copiedDrawCardPileArray.pop();\n                            const updatedPlayer1Deck = [\n                                ...player1Deck.slice(0, removeIndex),\n                                ...player1Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer1Deck.push(drawCard1);\n                            updatedPlayer1Deck.push(drawCard2);\n                            !isSoundMuted && playSkipCardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playSkipCardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [\n                                    ...player1Deck.slice(0, removeIndex),\n                                    ...player1Deck.slice(removeIndex + 1),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                            });\n                        }\n                    } else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber\n                        const removeIndex = player2Deck.indexOf(played_card);\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile];\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop();\n                            const drawCard2 = copiedDrawCardPileArray.pop();\n                            const updatedPlayer2Deck = [\n                                ...player2Deck.slice(0, removeIndex),\n                                ...player2Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer2Deck.push(drawCard1);\n                            updatedPlayer2Deck.push(drawCard2);\n                            !isSoundMuted && playSkipCardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 2\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playSkipCardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 2\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [\n                                    ...player2Deck.slice(0, removeIndex),\n                                    ...player2Deck.slice(removeIndex + 1),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                            });\n                        }\n                    }\n                }\n                //check for number match - if skip card played on skip card\n                else if (currentNumber === 404) {\n                    console.log(\"Numbers matched!\");\n                    //check who played the card and return new state accordingly\n                    if (cardPlayedBy === \"Player 1\") {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player1Deck.indexOf(played_card);\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile];\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop();\n                            const drawCard2 = copiedDrawCardPileArray.pop();\n                            const updatedPlayer1Deck = [\n                                ...player1Deck.slice(0, removeIndex),\n                                ...player1Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer1Deck.push(drawCard1);\n                            updatedPlayer1Deck.push(drawCard2);\n                            !isSoundMuted && playSkipCardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [...updatedPlayer1Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playSkipCardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [\n                                    ...player1Deck.slice(0, removeIndex),\n                                    ...player1Deck.slice(removeIndex + 1),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                            });\n                        }\n                    } else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player2Deck.indexOf(played_card);\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //make a copy of drawCardPile array\n                            const copiedDrawCardPileArray = [...drawCardPile];\n                            //pull out last two elements from it\n                            const drawCard1 = copiedDrawCardPileArray.pop();\n                            const drawCard2 = copiedDrawCardPileArray.pop();\n                            const updatedPlayer2Deck = [\n                                ...player2Deck.slice(0, removeIndex),\n                                ...player2Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer2Deck.push(drawCard1);\n                            updatedPlayer2Deck.push(drawCard2);\n                            !isSoundMuted && playSkipCardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 2\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [...updatedPlayer2Deck],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playSkipCardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 2\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [\n                                    ...player2Deck.slice(0, removeIndex),\n                                    ...player2Deck.slice(removeIndex + 1),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 404,\n                            });\n                        }\n                    }\n                }\n                //if no color or number match, invalid move - do not update state\n                else {\n                    alert(\"Invalid Move!\");\n                }\n                break;\n            }\n            //if card played was a draw 2 card\n            case \"D2R\":\n            case \"D2G\":\n            case \"D2B\":\n            case \"D2Y\": {\n                //extract color of played skip card\n                const colorOfPlayedCard = played_card.charAt(2);\n                //check for color match\n                if (currentColor === colorOfPlayedCard) {\n                    console.log(\"colors matched!\");\n                    //check who played the card and return new state accordingly\n                    if (cardPlayedBy === \"Player 1\") {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player1Deck.indexOf(played_card);\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile];\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop();\n                        const drawCard2 = copiedDrawCardPileArray.pop();\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop();\n                            const drawCard2X = copiedDrawCardPileArray.pop();\n                            const updatedPlayer1Deck = [\n                                ...player1Deck.slice(0, removeIndex),\n                                ...player1Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer1Deck.push(drawCard1X);\n                            updatedPlayer1Deck.push(drawCard2X);\n                            !isSoundMuted && playDraw2CardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [...updatedPlayer1Deck],\n                                player2Deck: [\n                                    ...player2Deck.slice(0, player2Deck.length),\n                                    drawCard1,\n                                    drawCard2,\n                                    ...player2Deck.slice(player2Deck.length),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playDraw2CardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [\n                                    ...player1Deck.slice(0, removeIndex),\n                                    ...player1Deck.slice(removeIndex + 1),\n                                ],\n                                player2Deck: [\n                                    ...player2Deck.slice(0, player2Deck.length),\n                                    drawCard1,\n                                    drawCard2,\n                                    ...player2Deck.slice(player2Deck.length),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        }\n                    } else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player2Deck.indexOf(played_card);\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile];\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop();\n                        const drawCard2 = copiedDrawCardPileArray.pop();\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop();\n                            const drawCard2X = copiedDrawCardPileArray.pop();\n                            const updatedPlayer2Deck = [\n                                ...player2Deck.slice(0, removeIndex),\n                                ...player2Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer2Deck.push(drawCard1X);\n                            updatedPlayer2Deck.push(drawCard2X);\n                            !isSoundMuted && playDraw2CardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [...updatedPlayer2Deck],\n                                player1Deck: [\n                                    ...player1Deck.slice(0, player1Deck.length),\n                                    drawCard1,\n                                    drawCard2,\n                                    ...player1Deck.slice(player1Deck.length),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playDraw2CardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [\n                                    ...player2Deck.slice(0, removeIndex),\n                                    ...player2Deck.slice(removeIndex + 1),\n                                ],\n                                player1Deck: [\n                                    ...player1Deck.slice(0, player1Deck.length),\n                                    drawCard1,\n                                    drawCard2,\n                                    ...player1Deck.slice(player1Deck.length),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        }\n                    }\n                }\n                //check for number match - if draw 2 card played on draw 2 card\n                else if (currentNumber === 252) {\n                    console.log(\"number matched!\");\n                    //check who played the card and return new state accordingly\n                    if (cardPlayedBy === \"Player 1\") {\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player1Deck.indexOf(played_card);\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile];\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop();\n                        const drawCard2 = copiedDrawCardPileArray.pop();\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop();\n                            const drawCard2X = copiedDrawCardPileArray.pop();\n                            const updatedPlayer1Deck = [\n                                ...player1Deck.slice(0, removeIndex),\n                                ...player1Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer1Deck.push(drawCard1X);\n                            updatedPlayer1Deck.push(drawCard2X);\n                            !isSoundMuted && playDraw2CardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [...updatedPlayer1Deck],\n                                player2Deck: [\n                                    ...player2Deck.slice(0, player2Deck.length),\n                                    drawCard1,\n                                    drawCard2,\n                                    ...player2Deck.slice(player2Deck.length),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playDraw2CardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [\n                                    ...player1Deck.slice(0, removeIndex),\n                                    ...player1Deck.slice(removeIndex + 1),\n                                ],\n                                player2Deck: [\n                                    ...player2Deck.slice(0, player2Deck.length),\n                                    drawCard1,\n                                    drawCard2,\n                                    ...player2Deck.slice(player2Deck.length),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        }\n                    } else {\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                        //then update currentColor and currentNumber - turn will remain same\n                        const removeIndex = player2Deck.indexOf(played_card);\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile];\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop();\n                        const drawCard2 = copiedDrawCardPileArray.pop();\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop();\n                            const drawCard2X = copiedDrawCardPileArray.pop();\n                            const updatedPlayer2Deck = [\n                                ...player2Deck.slice(0, removeIndex),\n                                ...player2Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer2Deck.push(drawCard1X);\n                            updatedPlayer2Deck.push(drawCard2X);\n                            !isSoundMuted && playDraw2CardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [...updatedPlayer2Deck],\n                                player1Deck: [\n                                    ...player1Deck.slice(0, player1Deck.length),\n                                    drawCard1,\n                                    drawCard2,\n                                    ...player1Deck.slice(player1Deck.length),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playDraw2CardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [\n                                    ...player2Deck.slice(0, removeIndex),\n                                    ...player2Deck.slice(removeIndex + 1),\n                                ],\n                                player1Deck: [\n                                    ...player1Deck.slice(0, player1Deck.length),\n                                    drawCard1,\n                                    drawCard2,\n                                    ...player1Deck.slice(player1Deck.length),\n                                ],\n                                currentColor: colorOfPlayedCard,\n                                currentNumber: 252,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        }\n                    }\n                }\n                //if no color or number match, invalid move - do not update state\n                else {\n                    alert(\"Invalid Move!\");\n                }\n                break;\n            }\n            //if card played was a wild card\n            case \"W\": {\n                //check who played the card and return new state accordingly\n                if (cardPlayedBy === \"Player 1\") {\n                    //ask for new color\n                    const newColor = prompt(\n                        \"Enter first letter of new color (R/G/B/Y)\"\n                    ).toUpperCase();\n                    //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player1Deck.indexOf(played_card);\n                    //then update turn, currentColor and currentNumber\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                        alert(\n                            \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                        );\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile];\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop();\n                        const drawCard2 = copiedDrawCardPileArray.pop();\n                        const updatedPlayer1Deck = [\n                            ...player1Deck.slice(0, removeIndex),\n                            ...player1Deck.slice(removeIndex + 1),\n                        ];\n                        updatedPlayer1Deck.push(drawCard1);\n                        updatedPlayer1Deck.push(drawCard2);\n                        !isSoundMuted && playWildCardSound();\n                        //send new state to server\n                        socket.emit(\"updateGameState\", {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, \"Player 1\"),\n                            turn: \"Player 2\",\n                            playedCardsPile: [\n                                ...playedCardsPile.slice(\n                                    0,\n                                    playedCardsPile.length\n                                ),\n                                played_card,\n                                ...playedCardsPile.slice(\n                                    playedCardsPile.length\n                                ),\n                            ],\n                            player1Deck: [...updatedPlayer1Deck],\n                            currentColor: newColor,\n                            currentNumber: 300,\n                            drawCardPile: [...copiedDrawCardPileArray],\n                        });\n                    } else {\n                        !isSoundMuted && playWildCardSound();\n                        //send new state to server\n                        socket.emit(\"updateGameState\", {\n                            gameOver: checkGameOver(player1Deck),\n                            winner: checkWinner(player1Deck, \"Player 1\"),\n                            turn: \"Player 2\",\n                            playedCardsPile: [\n                                ...playedCardsPile.slice(\n                                    0,\n                                    playedCardsPile.length\n                                ),\n                                played_card,\n                                ...playedCardsPile.slice(\n                                    playedCardsPile.length\n                                ),\n                            ],\n                            player1Deck: [\n                                ...player1Deck.slice(0, removeIndex),\n                                ...player1Deck.slice(removeIndex + 1),\n                            ],\n                            currentColor: newColor,\n                            currentNumber: 300,\n                        });\n                    }\n                } else {\n                    //ask for new color\n                    const newColor = prompt(\n                        \"Enter first letter of new color (R/G/B/Y)\"\n                    ).toUpperCase();\n                    //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                    const removeIndex = player2Deck.indexOf(played_card);\n                    //then update turn, currentColor and currentNumber\n                    //if two cards remaining check if player pressed UNO button\n                    //if not pressed add 2 cards as penalty\n                    if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                        alert(\n                            \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                        );\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile];\n                        //pull out last two elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop();\n                        const drawCard2 = copiedDrawCardPileArray.pop();\n                        const updatedPlayer2Deck = [\n                            ...player2Deck.slice(0, removeIndex),\n                            ...player2Deck.slice(removeIndex + 1),\n                        ];\n                        updatedPlayer2Deck.push(drawCard1);\n                        updatedPlayer2Deck.push(drawCard2);\n                        !isSoundMuted && playWildCardSound();\n                        //send new state to server\n                        socket.emit(\"updateGameState\", {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, \"Player 2\"),\n                            turn: \"Player 1\",\n                            playedCardsPile: [\n                                ...playedCardsPile.slice(\n                                    0,\n                                    playedCardsPile.length\n                                ),\n                                played_card,\n                                ...playedCardsPile.slice(\n                                    playedCardsPile.length\n                                ),\n                            ],\n                            player2Deck: [...updatedPlayer2Deck],\n                            currentColor: newColor,\n                            currentNumber: 300,\n                            drawCardPile: [...copiedDrawCardPileArray],\n                        });\n                    } else {\n                        !isSoundMuted && playWildCardSound();\n                        //send new state to server\n                        socket.emit(\"updateGameState\", {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, \"Player 2\"),\n                            turn: \"Player 1\",\n                            playedCardsPile: [\n                                ...playedCardsPile.slice(\n                                    0,\n                                    playedCardsPile.length\n                                ),\n                                played_card,\n                                ...playedCardsPile.slice(\n                                    playedCardsPile.length\n                                ),\n                            ],\n                            player2Deck: [\n                                ...player2Deck.slice(0, removeIndex),\n                                ...player2Deck.slice(removeIndex + 1),\n                            ],\n                            currentColor: newColor,\n                            currentNumber: 300,\n                        });\n                    }\n                }\n                break;\n            }\n            //if card played was a draw four wild card\n            case \"D4W\":\n                {\n                    //check who played the card and return new state accordingly\n                    if (cardPlayedBy === \"Player 1\") {\n                        //ask for new color\n                        const newColor = prompt(\n                            \"Enter first letter of new color (R/G/B/Y)\"\n                        ).toUpperCase();\n                        //remove the played card from player1's deck and add it to playedCardsPile (immutably)\n                        const removeIndex = player1Deck.indexOf(played_card);\n                        //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile];\n                        //pull out last four elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop();\n                        const drawCard2 = copiedDrawCardPileArray.pop();\n                        const drawCard3 = copiedDrawCardPileArray.pop();\n                        const drawCard4 = copiedDrawCardPileArray.pop();\n                        //then update currentColor and currentNumber - turn will remain same\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player1Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop();\n                            const drawCard2X = copiedDrawCardPileArray.pop();\n                            const updatedPlayer1Deck = [\n                                ...player1Deck.slice(0, removeIndex),\n                                ...player1Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer1Deck.push(drawCard1X);\n                            updatedPlayer1Deck.push(drawCard2X);\n                            !isSoundMuted && playDraw4CardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [...updatedPlayer1Deck],\n                                player2Deck: [\n                                    ...player2Deck.slice(0, player2Deck.length),\n                                    drawCard1,\n                                    drawCard2,\n                                    drawCard3,\n                                    drawCard4,\n                                    ...player2Deck.slice(player2Deck.length),\n                                ],\n                                currentColor: newColor,\n                                currentNumber: 600,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playDraw4CardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player1Deck),\n                                winner: checkWinner(player1Deck, \"Player 1\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player1Deck: [\n                                    ...player1Deck.slice(0, removeIndex),\n                                    ...player1Deck.slice(removeIndex + 1),\n                                ],\n                                player2Deck: [\n                                    ...player2Deck.slice(0, player2Deck.length),\n                                    drawCard1,\n                                    drawCard2,\n                                    drawCard3,\n                                    drawCard4,\n                                    ...player2Deck.slice(player2Deck.length),\n                                ],\n                                currentColor: newColor,\n                                currentNumber: 600,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        }\n                    } else {\n                        //ask for new color\n                        const newColor = prompt(\n                            \"Enter first letter of new color (R/G/B/Y)\"\n                        ).toUpperCase();\n                        //remove the played card from player2's deck and add it to playedCardsPile (immutably)\n                        const removeIndex = player2Deck.indexOf(played_card);\n                        //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                        //make a copy of drawCardPile array\n                        const copiedDrawCardPileArray = [...drawCardPile];\n                        //pull out last four elements from it\n                        const drawCard1 = copiedDrawCardPileArray.pop();\n                        const drawCard2 = copiedDrawCardPileArray.pop();\n                        const drawCard3 = copiedDrawCardPileArray.pop();\n                        const drawCard4 = copiedDrawCardPileArray.pop();\n                        //then update currentColor and currentNumber - turn will remain same\n                        !isSoundMuted && playDraw4CardSound();\n                        //send new state to server\n                        socket.emit(\"updateGameState\", {\n                            gameOver: checkGameOver(player2Deck),\n                            winner: checkWinner(player2Deck, \"Player 2\"),\n                            playedCardsPile: [\n                                ...playedCardsPile.slice(\n                                    0,\n                                    playedCardsPile.length\n                                ),\n                                played_card,\n                                ...playedCardsPile.slice(\n                                    playedCardsPile.length\n                                ),\n                            ],\n                            player2Deck: [\n                                ...player2Deck.slice(0, removeIndex),\n                                ...player2Deck.slice(removeIndex + 1),\n                            ],\n                            player1Deck: [\n                                ...player1Deck.slice(0, player1Deck.length),\n                                drawCard1,\n                                drawCard2,\n                                drawCard3,\n                                drawCard4,\n                                ...player1Deck.slice(player1Deck.length),\n                            ],\n                            currentColor: newColor,\n                            currentNumber: 600,\n                            drawCardPile: [...copiedDrawCardPileArray],\n                        });\n                        //if two cards remaining check if player pressed UNO button\n                        //if not pressed add 2 cards as penalty\n                        if (player2Deck.length === 2 && !isUnoButtonPressed) {\n                            alert(\n                                \"Oops! You forgot to press UNO. You drew 2 cards as penalty.\"\n                            );\n                            //pull out last two elements from drawCardPile\n                            const drawCard1X = copiedDrawCardPileArray.pop();\n                            const drawCard2X = copiedDrawCardPileArray.pop();\n                            const updatedPlayer2Deck = [\n                                ...player2Deck.slice(0, removeIndex),\n                                ...player2Deck.slice(removeIndex + 1),\n                            ];\n                            updatedPlayer2Deck.push(drawCard1X);\n                            updatedPlayer2Deck.push(drawCard2X);\n                            !isSoundMuted && playDraw4CardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 2\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [...updatedPlayer2Deck],\n                                player1Deck: [\n                                    ...player1Deck.slice(0, player1Deck.length),\n                                    drawCard1,\n                                    drawCard2,\n                                    drawCard3,\n                                    drawCard4,\n                                    ...player1Deck.slice(player1Deck.length),\n                                ],\n                                currentColor: newColor,\n                                currentNumber: 600,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        } else {\n                            !isSoundMuted && playDraw4CardSound();\n                            //send new state to server\n                            socket.emit(\"updateGameState\", {\n                                gameOver: checkGameOver(player2Deck),\n                                winner: checkWinner(player2Deck, \"Player 2\"),\n                                playedCardsPile: [\n                                    ...playedCardsPile.slice(\n                                        0,\n                                        playedCardsPile.length\n                                    ),\n                                    played_card,\n                                    ...playedCardsPile.slice(\n                                        playedCardsPile.length\n                                    ),\n                                ],\n                                player2Deck: [\n                                    ...player2Deck.slice(0, removeIndex),\n                                    ...player2Deck.slice(removeIndex + 1),\n                                ],\n                                player1Deck: [\n                                    ...player1Deck.slice(0, player1Deck.length),\n                                    drawCard1,\n                                    drawCard2,\n                                    drawCard3,\n                                    drawCard4,\n                                    ...player1Deck.slice(player1Deck.length),\n                                ],\n                                currentColor: newColor,\n                                currentNumber: 600,\n                                drawCardPile: [...copiedDrawCardPileArray],\n                            });\n                        }\n                    }\n                }\n                break;\n        }\n    };\n\n    const onCardDrawnHandler = () => {\n        // * extract 1 random card from drawcardpile\n        // * check if playable\n        // * if playable\n        // * execute onCardplayedHandler(drawn card)\n        // * else\n        //* add drawn card to current player's deck\n        // * set turn to other player\n\n        //extract player who drew the card\n        const cardDrawnBy = turn;\n        //check who drew the card and return new state accordingly\n        if (cardDrawnBy === \"Player 1\") {\n            //remove 1 new card from drawCardPile and add it to player1's deck (immutably)\n            //make a copy of drawCardPile array\n            const copiedDrawCardPileArray = [...drawCardPile];\n            //pull out last element from it\n            const drawCard = copiedDrawCardPileArray.pop();\n            //extract number and color of drawn card\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1);\n            let numberOfDrawnCard = drawCard.charAt(0);\n            if (\n                colorOfDrawnCard === currentColor &&\n                (drawCard === \"skipR\" ||\n                    drawCard === \"skipG\" ||\n                    drawCard === \"skipB\" ||\n                    drawCard === \"skipY\")\n            ) {\n                alert(`You drew ${drawCard}. It was played for you.`);\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit(\"updateGameState\", {\n                    playedCardsPile: [\n                        ...playedCardsPile.slice(0, playedCardsPile.length),\n                        drawCard,\n                        ...playedCardsPile.slice(playedCardsPile.length),\n                    ],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 404,\n                    drawCardPile: [...copiedDrawCardPileArray],\n                });\n            } else if (\n                colorOfDrawnCard === currentColor &&\n                (drawCard === \"D2R\" ||\n                    drawCard === \"D2G\" ||\n                    drawCard === \"D2B\" ||\n                    drawCard === \"D2Y\")\n            ) {\n                alert(`You drew ${drawCard}. It was played for you.`);\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile];\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                !isSoundMuted && playDraw2CardSound();\n                //send new state to server\n                socket.emit(\"updateGameState\", {\n                    playedCardsPile: [\n                        ...playedCardsPile.slice(0, playedCardsPile.length),\n                        drawCard,\n                        ...playedCardsPile.slice(playedCardsPile.length),\n                    ],\n                    player2Deck: [\n                        ...player2Deck.slice(0, player2Deck.length),\n                        drawCard1,\n                        drawCard2,\n                        ...player2Deck.slice(player2Deck.length),\n                    ],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 252,\n                    drawCardPile: [...copiedDrawCardPileArray],\n                });\n            } else if (drawCard === \"W\") {\n                alert(`You drew ${drawCard}. It was played for you.`);\n                //ask for new color\n                const newColor = prompt(\n                    \"Enter first letter of new color (R/G/B/Y)\"\n                ).toUpperCase();\n                !isSoundMuted && playWildCardSound();\n                //send new state to server\n                socket.emit(\"updateGameState\", {\n                    turn: \"Player 2\",\n                    playedCardsPile: [\n                        ...playedCardsPile.slice(0, playedCardsPile.length),\n                        drawCard,\n                        ...playedCardsPile.slice(playedCardsPile.length),\n                    ],\n                    currentColor: newColor,\n                    currentNumber: 300,\n                    drawCardPile: [...copiedDrawCardPileArray],\n                });\n            } else if (drawCard === \"D4W\") {\n                alert(`You drew ${drawCard}. It was played for you.`);\n                //ask for new color\n                const newColor = prompt(\n                    \"Enter first letter of new color (R/G/B/Y)\"\n                ).toUpperCase();\n                //remove 2 new cards from drawCardPile and add them to player2's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile];\n                //pull out last four elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const drawCard3 = copiedDrawCardPileArray.pop();\n                const drawCard4 = copiedDrawCardPileArray.pop();\n                !isSoundMuted && playDraw4CardSound();\n                //send new state to server\n                socket.emit(\"updateGameState\", {\n                    playedCardsPile: [\n                        ...playedCardsPile.slice(0, playedCardsPile.length),\n                        drawCard,\n                        ...playedCardsPile.slice(playedCardsPile.length),\n                    ],\n                    player2Deck: [\n                        ...player2Deck.slice(0, player2Deck.length),\n                        drawCard1,\n                        drawCard2,\n                        drawCard3,\n                        drawCard4,\n                        ...player2Deck.slice(player2Deck.length),\n                    ],\n                    currentColor: newColor,\n                    currentNumber: 600,\n                    drawCardPile: [...copiedDrawCardPileArray],\n                });\n            }\n            //if not action card - check if drawn card is playable\n            else if (\n                numberOfDrawnCard === currentNumber ||\n                colorOfDrawnCard === currentColor\n            ) {\n                alert(`You drew ${drawCard}. It was played for you.`);\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit(\"updateGameState\", {\n                    turn: \"Player 2\",\n                    playedCardsPile: [\n                        ...playedCardsPile.slice(0, playedCardsPile.length),\n                        drawCard,\n                        ...playedCardsPile.slice(playedCardsPile.length),\n                    ],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: numberOfDrawnCard,\n                    drawCardPile: [...copiedDrawCardPileArray],\n                });\n            }\n            //else add the drawn card to player1's deck\n            else {\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit(\"updateGameState\", {\n                    turn: \"Player 2\",\n                    player1Deck: [\n                        ...player1Deck.slice(0, player1Deck.length),\n                        drawCard,\n                        ...player1Deck.slice(player1Deck.length),\n                    ],\n                    drawCardPile: [...copiedDrawCardPileArray],\n                });\n            }\n        } else {\n            //remove 1 new card from drawCardPile and add it to player2's deck (immutably)\n            //make a copy of drawCardPile array\n            const copiedDrawCardPileArray = [...drawCardPile];\n            //pull out last element from it\n            const drawCard = copiedDrawCardPileArray.pop();\n            //extract number and color of drawn card\n            const colorOfDrawnCard = drawCard.charAt(drawCard.length - 1);\n            let numberOfDrawnCard = drawCard.charAt(0);\n            if (\n                colorOfDrawnCard === currentColor &&\n                (drawCard === \"skipR\" ||\n                    drawCard === \"skipG\" ||\n                    drawCard === \"skipB\" ||\n                    drawCard === \"skipY\")\n            ) {\n                alert(`You drew ${drawCard}. It was played for you.`);\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit(\"updateGameState\", {\n                    playedCardsPile: [\n                        ...playedCardsPile.slice(0, playedCardsPile.length),\n                        drawCard,\n                        ...playedCardsPile.slice(playedCardsPile.length),\n                    ],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 404,\n                    drawCardPile: [...copiedDrawCardPileArray],\n                });\n            } else if (\n                colorOfDrawnCard === currentColor &&\n                (drawCard === \"D2R\" ||\n                    drawCard === \"D2G\" ||\n                    drawCard === \"D2B\" ||\n                    drawCard === \"D2Y\")\n            ) {\n                alert(`You drew ${drawCard}. It was played for you.`);\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile];\n                //pull out last two elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                !isSoundMuted && playDraw2CardSound();\n                //send new state to server\n                socket.emit(\"updateGameState\", {\n                    playedCardsPile: [\n                        ...playedCardsPile.slice(0, playedCardsPile.length),\n                        drawCard,\n                        ...playedCardsPile.slice(playedCardsPile.length),\n                    ],\n                    player1Deck: [\n                        ...player1Deck.slice(0, player1Deck.length),\n                        drawCard1,\n                        drawCard2,\n                        ...player1Deck.slice(player1Deck.length),\n                    ],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: 252,\n                    drawCardPile: [...copiedDrawCardPileArray],\n                });\n            } else if (drawCard === \"W\") {\n                alert(`You drew ${drawCard}. It was played for you.`);\n                //ask for new color\n                const newColor = prompt(\n                    \"Enter first letter of new color (R/G/B/Y)\"\n                ).toUpperCase();\n                !isSoundMuted && playWildCardSound();\n                //send new state to server\n                socket.emit(\"updateGameState\", {\n                    turn: \"Player 1\",\n                    playedCardsPile: [\n                        ...playedCardsPile.slice(0, playedCardsPile.length),\n                        drawCard,\n                        ...playedCardsPile.slice(playedCardsPile.length),\n                    ],\n                    currentColor: newColor,\n                    currentNumber: 300,\n                    drawCardPile: [...copiedDrawCardPileArray],\n                });\n            } else if (drawCard === \"D4W\") {\n                alert(`You drew ${drawCard}. It was played for you.`);\n                //ask for new color\n                const newColor = prompt(\n                    \"Enter first letter of new color (R/G/B/Y)\"\n                ).toUpperCase();\n                //remove 2 new cards from drawCardPile and add them to player1's deck (immutably)\n                //make a copy of drawCardPile array\n                const copiedDrawCardPileArray = [...drawCardPile];\n                //pull out last four elements from it\n                const drawCard1 = copiedDrawCardPileArray.pop();\n                const drawCard2 = copiedDrawCardPileArray.pop();\n                const drawCard3 = copiedDrawCardPileArray.pop();\n                const drawCard4 = copiedDrawCardPileArray.pop();\n                !isSoundMuted && playDraw4CardSound();\n                //send new state to server\n                socket.emit(\"updateGameState\", {\n                    playedCardsPile: [\n                        ...playedCardsPile.slice(0, playedCardsPile.length),\n                        drawCard,\n                        ...playedCardsPile.slice(playedCardsPile.length),\n                    ],\n                    player1Deck: [\n                        ...player1Deck.slice(0, player1Deck.length),\n                        drawCard1,\n                        drawCard2,\n                        drawCard3,\n                        drawCard4,\n                        ...player1Deck.slice(player1Deck.length),\n                    ],\n                    currentColor: newColor,\n                    currentNumber: 600,\n                    drawCardPile: [...copiedDrawCardPileArray],\n                });\n            }\n            //if not action card - check if drawn card is playable\n            else if (\n                numberOfDrawnCard === currentNumber ||\n                colorOfDrawnCard === currentColor\n            ) {\n                alert(`You drew ${drawCard}. It was played for you.`);\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit(\"updateGameState\", {\n                    turn: \"Player 1\",\n                    playedCardsPile: [\n                        ...playedCardsPile.slice(0, playedCardsPile.length),\n                        drawCard,\n                        ...playedCardsPile.slice(playedCardsPile.length),\n                    ],\n                    currentColor: colorOfDrawnCard,\n                    currentNumber: numberOfDrawnCard,\n                    drawCardPile: [...copiedDrawCardPileArray],\n                });\n            }\n            //else add the drawn card to player2's deck\n            else {\n                !isSoundMuted && playShufflingSound();\n                //send new state to server\n                socket.emit(\"updateGameState\", {\n                    turn: \"Player 1\",\n                    player2Deck: [\n                        ...player2Deck.slice(0, player2Deck.length),\n                        drawCard,\n                        ...player2Deck.slice(player2Deck.length),\n                    ],\n                    drawCardPile: [...copiedDrawCardPileArray],\n                });\n            }\n        }\n    };\n\n    return (\n        <div className={`Game backgroundColorR backgroundColor${currentColor}`}>\n            {!roomFull ? (\n                <>\n                    <div className=\"topInfo\">\n                        <img src={require(\"../assets/logo.png\").default} />\n                        <h1>Game Code: {room}</h1>\n                        <span>\n                            <button\n                                className=\"game-button green\"\n                                onClick={() => setSoundMuted(!isSoundMuted)}\n                            >\n                                {isSoundMuted ? (\n                                    <span className=\"material-icons\">\n                                        volume_off\n                                    </span>\n                                ) : (\n                                    <span className=\"material-icons\">\n                                        volume_up\n                                    </span>\n                                )}\n                            </button>\n                            <button\n                                className=\"game-button green\"\n                                onClick={() => {\n                                    if (isMusicMuted) playBBgMusic();\n                                    else pause();\n                                    setMusicMuted(!isMusicMuted);\n                                }}\n                            >\n                                {isMusicMuted ? (\n                                    <span className=\"material-icons\">\n                                        music_off\n                                    </span>\n                                ) : (\n                                    <span className=\"material-icons\">\n                                        music_note\n                                    </span>\n                                )}\n                            </button>\n                        </span>\n                    </div>\n\n                    {/* PLAYER LEFT MESSAGES */}\n                    {users.length === 1 && currentUser === \"Player 2\" && (\n                        <h1 className=\"topInfoText\">\n                            Player 1 has left the game.\n                        </h1>\n                    )}\n                    {users.length === 1 && currentUser === \"Player 1\" && (\n                        <h1 className=\"topInfoText\">\n                            Waiting for Player 2 to join the game.\n                        </h1>\n                    )}\n\n                    {users.length === 2 && (\n                        <>\n                            {gameOver ? (\n                                <div>\n                                    {winner !== \"\" && (\n                                        <>\n                                            <h1>GAME OVER</h1>\n                                            <h2>{winner} wins!</h2>\n                                        </>\n                                    )}\n                                </div>\n                            ) : (\n                                <div>\n                                    {/* PLAYER 1 VIEW */}\n                                    {currentUser === \"Player 1\" && (\n                                        <>\n                                            <div\n                                                className=\"player2Deck\"\n                                                style={{\n                                                    pointerEvents: \"none\",\n                                                }}\n                                            >\n                                                <p className=\"playerDeckText\">\n                                                    Player 2\n                                                </p>\n                                                {player2Deck.map((item, i) => (\n                                                    <img\n                                                        key={i}\n                                                        className=\"Card\"\n                                                        onClick={() =>\n                                                            onCardPlayedHandler(\n                                                                item\n                                                            )\n                                                        }\n                                                        src={\n                                                            require(`../assets/card-back.png`)\n                                                                .default\n                                                        }\n                                                    />\n                                                ))}\n                                                {turn === \"Player 2\" && (\n                                                    <Spinner />\n                                                )}\n                                            </div>\n                                            <br />\n                                            <div\n                                                className=\"middleInfo\"\n                                                style={\n                                                    turn === \"Player 2\"\n                                                        ? {\n                                                              pointerEvents:\n                                                                  \"none\",\n                                                          }\n                                                        : null\n                                                }\n                                            >\n                                                <button\n                                                    className=\"game-button\"\n                                                    disabled={\n                                                        turn !== \"Player 1\"\n                                                    }\n                                                    onClick={onCardDrawnHandler}\n                                                >\n                                                    DRAW CARD\n                                                </button>\n                                                {playedCardsPile &&\n                                                    playedCardsPile.length >\n                                                        0 && (\n                                                        <img\n                                                            className=\"Card\"\n                                                            src={\n                                                                require(`../assets/cards-front/${\n                                                                    playedCardsPile[\n                                                                        playedCardsPile.length -\n                                                                            1\n                                                                    ]\n                                                                }.png`).default\n                                                            }\n                                                        />\n                                                    )}\n                                                <button\n                                                    className=\"game-button orange\"\n                                                    disabled={\n                                                        player1Deck.length !== 2\n                                                    }\n                                                    onClick={() => {\n                                                        setUnoButtonPressed(\n                                                            !isUnoButtonPressed\n                                                        );\n                                                        playUnoSound();\n                                                    }}\n                                                >\n                                                    UNO\n                                                </button>\n                                            </div>\n                                            <br />\n                                            <div\n                                                className=\"player1Deck\"\n                                                style={\n                                                    turn === \"Player 1\"\n                                                        ? null\n                                                        : {\n                                                              pointerEvents:\n                                                                  \"none\",\n                                                          }\n                                                }\n                                            >\n                                                <p className=\"playerDeckText\">\n                                                    Player 1\n                                                </p>\n                                                {player1Deck.map((item, i) => (\n                                                    <img\n                                                        key={i}\n                                                        className=\"Card\"\n                                                        onClick={() =>\n                                                            onCardPlayedHandler(\n                                                                item\n                                                            )\n                                                        }\n                                                        src={\n                                                            require(`../assets/cards-front/${item}.png`)\n                                                                .default\n                                                        }\n                                                    />\n                                                ))}\n                                            </div>\n                                            <div className=\"chatBoxWrapper\">\n                                                <div className=\"chat-box chat-box-player1\">\n                                                    <div className=\"chat-head\">\n                                                        <h2>Chat Box</h2>\n                                                        {!isChatBoxHidden ? (\n                                                            <span\n                                                                onClick={\n                                                                    toggleChatBox\n                                                                }\n                                                                class=\"material-icons\"\n                                                            >\n                                                                keyboard_arrow_down\n                                                            </span>\n                                                        ) : (\n                                                            <span\n                                                                onClick={\n                                                                    toggleChatBox\n                                                                }\n                                                                class=\"material-icons\"\n                                                            >\n                                                                keyboard_arrow_up\n                                                            </span>\n                                                        )}\n                                                    </div>\n                                                    <div className=\"chat-body\">\n                                                        <div className=\"msg-insert\">\n                                                            {messages.map(\n                                                                (msg) => {\n                                                                    if (\n                                                                        msg.user ===\n                                                                        \"Player 2\"\n                                                                    )\n                                                                        return (\n                                                                            <div className=\"msg-receive\">\n                                                                                {\n                                                                                    msg.text\n                                                                                }\n                                                                            </div>\n                                                                        );\n                                                                    if (\n                                                                        msg.user ===\n                                                                        \"Player 1\"\n                                                                    )\n                                                                        return (\n                                                                            <div className=\"msg-send\">\n                                                                                {\n                                                                                    msg.text\n                                                                                }\n                                                                            </div>\n                                                                        );\n                                                                }\n                                                            )}\n                                                        </div>\n                                                        <div className=\"chat-text\">\n                                                            <input\n                                                                type=\"text\"\n                                                                placeholder=\"Type a message...\"\n                                                                value={message}\n                                                                onChange={(\n                                                                    event\n                                                                ) =>\n                                                                    setMessage(\n                                                                        event\n                                                                            .target\n                                                                            .value\n                                                                    )\n                                                                }\n                                                                onKeyPress={(\n                                                                    event\n                                                                ) =>\n                                                                    event.key ===\n                                                                        \"Enter\" &&\n                                                                    sendMessage(\n                                                                        event\n                                                                    )\n                                                                }\n                                                            />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>{\" \"}\n                                        </>\n                                    )}\n\n                                    {/* PLAYER 2 VIEW */}\n                                    {currentUser === \"Player 2\" && (\n                                        <>\n                                            <div\n                                                className=\"player1Deck\"\n                                                style={{\n                                                    pointerEvents: \"none\",\n                                                }}\n                                            >\n                                                <p className=\"playerDeckText\">\n                                                    Player 1\n                                                </p>\n                                                {player1Deck.map((item, i) => (\n                                                    <img\n                                                        key={i}\n                                                        className=\"Card\"\n                                                        onClick={() =>\n                                                            onCardPlayedHandler(\n                                                                item\n                                                            )\n                                                        }\n                                                        src={\n                                                            require(`../assets/card-back.png`)\n                                                                .default\n                                                        }\n                                                    />\n                                                ))}\n                                                {turn === \"Player 1\" && (\n                                                    <Spinner />\n                                                )}\n                                            </div>\n                                            <br />\n                                            <div\n                                                className=\"middleInfo\"\n                                                style={\n                                                    turn === \"Player 1\"\n                                                        ? {\n                                                              pointerEvents:\n                                                                  \"none\",\n                                                          }\n                                                        : null\n                                                }\n                                            >\n                                                <button\n                                                    className=\"game-button\"\n                                                    disabled={\n                                                        turn !== \"Player 2\"\n                                                    }\n                                                    onClick={onCardDrawnHandler}\n                                                >\n                                                    DRAW CARD\n                                                </button>\n                                                {playedCardsPile &&\n                                                    playedCardsPile.length >\n                                                        0 && (\n                                                        <img\n                                                            className=\"Card\"\n                                                            src={\n                                                                require(`../assets/cards-front/${\n                                                                    playedCardsPile[\n                                                                        playedCardsPile.length -\n                                                                            1\n                                                                    ]\n                                                                }.png`).default\n                                                            }\n                                                        />\n                                                    )}\n                                                <button\n                                                    className=\"game-button orange\"\n                                                    disabled={\n                                                        player2Deck.length !== 2\n                                                    }\n                                                    onClick={() => {\n                                                        setUnoButtonPressed(\n                                                            !isUnoButtonPressed\n                                                        );\n                                                        playUnoSound();\n                                                    }}\n                                                >\n                                                    UNO\n                                                </button>\n                                            </div>\n                                            <br />\n                                            <div\n                                                className=\"player2Deck\"\n                                                style={\n                                                    turn === \"Player 1\"\n                                                        ? {\n                                                              pointerEvents:\n                                                                  \"none\",\n                                                          }\n                                                        : null\n                                                }\n                                            >\n                                                <p className=\"playerDeckText\">\n                                                    Player 2\n                                                </p>\n                                                {player2Deck.map((item, i) => (\n                                                    <img\n                                                        key={i}\n                                                        className=\"Card\"\n                                                        onClick={() =>\n                                                            onCardPlayedHandler(\n                                                                item\n                                                            )\n                                                        }\n                                                        src={\n                                                            require(`../assets/cards-front/${item}.png`)\n                                                                .default\n                                                        }\n                                                    />\n                                                ))}\n                                            </div>\n                                            <div className=\"chatBoxWrapper\">\n                                                <div className=\"chat-box chat-box-player2\">\n                                                    <div className=\"chat-head\">\n                                                        <h2>Chat Box</h2>\n                                                        {!isChatBoxHidden ? (\n                                                            <span\n                                                                onClick={\n                                                                    toggleChatBox\n                                                                }\n                                                                class=\"material-icons\"\n                                                            >\n                                                                keyboard_arrow_down\n                                                            </span>\n                                                        ) : (\n                                                            <span\n                                                                onClick={\n                                                                    toggleChatBox\n                                                                }\n                                                                class=\"material-icons\"\n                                                            >\n                                                                keyboard_arrow_up\n                                                            </span>\n                                                        )}\n                                                    </div>\n                                                    <div className=\"chat-body\">\n                                                        <div className=\"msg-insert\">\n                                                            {messages.map(\n                                                                (msg) => {\n                                                                    if (\n                                                                        msg.user ===\n                                                                        \"Player 1\"\n                                                                    )\n                                                                        return (\n                                                                            <div className=\"msg-receive\">\n                                                                                {\n                                                                                    msg.text\n                                                                                }\n                                                                            </div>\n                                                                        );\n                                                                    if (\n                                                                        msg.user ===\n                                                                        \"Player 2\"\n                                                                    )\n                                                                        return (\n                                                                            <div className=\"msg-send\">\n                                                                                {\n                                                                                    msg.text\n                                                                                }\n                                                                            </div>\n                                                                        );\n                                                                }\n                                                            )}\n                                                        </div>\n                                                        <div className=\"chat-text\">\n                                                            <input\n                                                                type=\"text\"\n                                                                placeholder=\"Type a message...\"\n                                                                value={message}\n                                                                onChange={(\n                                                                    event\n                                                                ) =>\n                                                                    setMessage(\n                                                                        event\n                                                                            .target\n                                                                            .value\n                                                                    )\n                                                                }\n                                                                onKeyPress={(\n                                                                    event\n                                                                ) =>\n                                                                    event.key ===\n                                                                        \"Enter\" &&\n                                                                    sendMessage(\n                                                                        event\n                                                                    )\n                                                                }\n                                                            />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>{\" \"}\n                                        </>\n                                    )}\n                                </div>\n                            )}\n                        </>\n                    )}\n                </>\n            ) : (\n                <h1>Room full</h1>\n            )}\n\n            <br />\n            <a href=\"/\">\n                <button className=\"game-button red\">QUIT</button>\n            </a>\n            <button onClick={share} className=\"game-button green\">\n                SHARE\n            </button>\n        </div>\n    );\n};\n\nexport default Game;\n","import React from \"react\";\n\nconst Spinner = () => {\n    return <div className=\"loader\">Loading...</div>;\n};\n\nexport default Spinner;\n","export default __webpack_public_path__ + \"static/media/draw2-sound.0f5186fc.mp3\";","export default __webpack_public_path__ + \"static/media/draw4-sound.37381092.mp3\";","export default __webpack_public_path__ + \"static/media/game-bg-music.b2aba912.mp3\";","export default __webpack_public_path__ + \"static/media/game-over-sound.503df35a.mp3\";","export default __webpack_public_path__ + \"static/media/shuffling-cards-1.30ba20ce.mp3\";","export default __webpack_public_path__ + \"static/media/skip-sound.1227f2fd.mp3\";","export default __webpack_public_path__ + \"static/media/uno-sound.5d88cef2.mp3\";","export default __webpack_public_path__ + \"static/media/wild-sound.dc7f4eb1.mp3\";","// * for shuffling the cards\n\nexport default function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n}\n","// * to generate room ids\n\nexport default function makeid(length) {\n    var result = \"\";\n    var characters =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(\n            Math.floor(Math.random() * charactersLength)\n        );\n    }\n    return result;\n}\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport randomCodeGenerator from \"../utils/randomCodeGenerator\";\n\nconst Homepage = () => {\n    const [roomCode, setRoomCode] = useState(\"\");\n\n    return (\n        <>\n            <div className=\"Homepage\">\n                <div className=\"homepage-menu\">\n                    <img\n                        src={require(\"../assets/logo.png\").default}\n                        width=\"200px\"\n                    />\n                    <div className=\"homepage-form\">\n                        <div className=\"homepage-join\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"Game Code\"\n                                onChange={(event) =>\n                                    setRoomCode(event.target.value)\n                                }\n                            />\n                            <Link to={`/play?roomCode=${roomCode}`}>\n                                <button className=\"game-button green\">\n                                    JOIN GAME\n                                </button>\n                            </Link>\n                        </div>\n                        <h1>OR</h1>\n                        <div className=\"homepage-create\">\n                            <Link\n                                to={`/play?roomCode=${randomCodeGenerator(5)}`}\n                            >\n                                <button className=\"game-button orange\">\n                                    CREATE GAME\n                                </button>\n                            </Link>\n                        </div>\n                    </div>\n                    <div className=\"homepage-rules\">\n                        <p>\n                            If you are new to UNO, you can read the{\" \"}\n                            <a\n                                href=\"https://www.unorules.com/\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                UNO rules\n                            </a>\n                            .\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Homepage;\n","import { Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Game from \"./components/Game\";\nimport Homepage from \"./components/Homepage\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Route path=\"/\" exact component={Homepage} />\n            <Route path=\"/play\" exact component={Game} />\n            <footer className=\"app-footer\">\n                <p>\n                    Crafted with 🧠 and ❤️ by{\" \"}\n                    <a\n                        href=\"https://www.linkedin.com/in/sakshguptavit/\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Saksham Gupta\n                    </a>\n                </p>\n            </footer>\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}